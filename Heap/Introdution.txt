A Heap is a special Tree-based data structure in which the tree is a complete binary tree. Generally, Heaps can be of two types:

Max-Heap: In a Max-Heap the key present at the root node must be greatest among the keys present at all of it’s children. The same property must be recursively true for all sub-trees
in that Binary Tree.


Min-Heap: In a Min-Heap the key present at the root node must be minimum among the keys present at all of it’s children. The same property must be recursively true for all sub-trees
in that Binary Tree.


-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Binary Heap: 

A Binary Heap is a Complete Binary Tree. A binary heap is typically represented as an array.

The root element will be at Arr[0].
Below table shows indexes of other nodes for the ith node, i.e., Arr[i]:
Arr[(i-1)/2]	Returns the parent node
Arr[(2*i)+1]	Returns the left child node
Arr[(2*i)+2]	Returns the right child node


Applications of Heap:

1.) Heap sort
2.) Priority queue
3.) Graph algorithms like Dijikstra algorithm, shortest path & prim's algorithm for minimum spanning tree
4.) Many problems can be efficiently solved using Heaps. See following for example.

a) K’th Largest Element in an array.
b) Sort an almost sorted array/
c) Merge K Sorted Arrays.


Operations on Binary Heap (Min Heap):

1.) getMin() -> returns minimum element of heap in O(1) time.

2.) extractMin() -> return & delete minimum element of heap in O(logN) time.

3.) decreaseKey(new_val, old_val) -> O(logN)

4.) insert(key) -> insert element in heap in O(logN) time

5.) delete(key) -> delete a specific key in heap in O(logN) time
